/*
    선택한 파일의 MD5를 추출한 다음, VirusTotal에 동일한 MD5를 가진 항목이 있는지 요청 한 후,
    요청 결과 JSON 문자열을 보기좋게 파싱하여 Map 형태로(MD5:JSON) 저장 한 다음,
    이후 파일 부터 해당 MD5가 Map의 Key 값으로 이미 등록되어 있을 경우, VirusTotal에 요청하지 않고
    Key에 해당하는 Value를 출력하는 EnScript.
*/
class MainClass {

    void Main(CaseClass c) {
        SystemClass::ClearConsole(SystemClass::SHOWCONSOLE);
        SearchClass search();
        NameValueClass md5JsonMap();
        for(ItemIteratorClass	iter(c,	0,	ItemIteratorClass::CURRENTVIEW_SELECTED);	EntryClass	entry	=	iter.GetNextEntry();) {
            HashClass	md5	=	search.ComputeHash(entry);
            NameValueClass isAlreadyRequested = md5JsonMap.Find(md5);
            if(!isAlreadyRequested){
                if(md5.IsValid()) {
                    String resultJson = getResult(md5);
                    Console.WriteLine("#####" + entry.TruePath() + "#####");
                    Console.WriteLine(resultJson);
                    NameValueClass key(md5JsonMap, md5);
                    key.SetValue(resultJson);
                } else {
                    Console.WriteLine("#####" + entry.TruePath() + " is not Valid#####");
                }
            } else {
                Console.WriteLine("#####" + entry.TruePath() + " (Map value)#####");
                Console.WriteLine(isAlreadyRequested.Value());
            }
        }
    }

    String getResult(String md5) {
        String jsonResult = "ERROR";
        String address = "www.virustotal.com";
        String api = "e21dbf4076f7273e16fe05c1f6beef7251de50d2e2ac053f5a412f3e21a3f89e";
        String relativeUrl = "/vtapi/v2/file/report";
        uint port = SocketClass::HTTPPORT;
        uint options =  WebClientClass::SSL | WebClientClass::VALIDATESERVERCERT;
        WebClientClass client();
        if (client.Open(address, port)) {
            WebServiceClass::RequestClass request();
            WebServiceClass::ReplyClass reply();
            request.Command = WebServiceClass::RequestClass::GET;
            request.URL = relativeUrl + "?apikey=" + api + "&resource=" + md5;
            if (!client.Command(request, reply)){
                Console.WriteLine("[ × ] 서버 연결 실패! [Code : " + reply.Code + "]");
            }
            if(reply.File && reply.File.IsOpen()) {
                String line;
                reply.File.SetCodePage(CodePageClass::ANSI);
                while(reply.File.More()) {
                    reply.File.ReadString(line, -1, "\r\n");
                    line.Trim("\r\n", String::TRIMALL);
                }
                line.Replace(" ", "");
                jsonResult = jsonParser(line);
                jsonResult.Replace("Therequestedresourceisnotamongthefinished,\n  queuedorpendingscans", "The requested resource is not among the finished, queued or pending scans");
            }
        } else {
            Console.WriteLine("[ × ] 서버 연결 실패!");
        }
        return jsonResult;
    }
    
    String jsonParser(String json) {
        uint innerCounter = 0;
        uint startIndex = 0;
        uint endIndex = 0;
        String jsonResult = "";
        for(uint index = 0; index < json.GetLength(); index++) {
            if(json[index] == '{') {
                innerCounter ++;
                jsonResult+="{\n";
                jsonResult+=putSpace(innerCounter);
            } else if(json[index] == '}') {
                innerCounter --;
                jsonResult+="\n";
                jsonResult+=putSpace(innerCounter);
                jsonResult+="}";
            } else if(json[index] == ',') {
                jsonResult+=",\n";
                jsonResult+=putSpace(innerCounter);
            } else {
                jsonResult+=json[index];
            }
        }
        return jsonResult;
    }
    
    String putSpace(uint count) {
        String returnSpace = "";
        for(uint spaceIndex = 0; spaceIndex < count; spaceIndex++) {
            returnSpace+="  ";
        }
        return returnSpace;
    }
}